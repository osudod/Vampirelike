import sys, os, json, shutil, uuid, hashlib
from cryptography.fernet import Fernet
import base64

# ------------------------
# üîπ –ü–£–¢–ò
# ------------------------
def resource_path(relative_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ exe, –∏ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"""
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)


def get_save_dir():
    """–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –≤ AppData"""
    appdata = os.getenv("APPDATA")
    save_dir = os.path.join(appdata, "Dead_world")  # ‚Üê –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è
    os.makedirs(save_dir, exist_ok=True)
    return save_dir


def get_save_path():
    """–ü—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É —Å–µ–π–≤–∞"""
    return os.path.join(get_save_dir(), "save.dat")


# ------------------------
# üîπ –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ö–õ–Æ–ß–ê –î–õ–Ø –ü–ö
# ------------------------
def generate_system_key():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ü–ö
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ UUID —Å–∏—Å—Ç–µ–º—ã.
    """
    username = os.getenv("USERNAME", "UnknownUser")
    system_id = uuid.getnode()  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π MAC/ID –º–∞—à–∏–Ω—ã
    raw_key = f"{username}-{system_id}-Dead_world".encode("utf-8")

    # –•—ç—à –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ 32-–±–∞–π—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è Fernet
    key = hashlib.sha256(raw_key).digest()
    return Fernet(base64.urlsafe_b64encode(key[:32]))


# ------------------------
# üîπ –°–û–ó–î–ê–ù–ò–ï SAVE, –ï–°–õ–ò –ù–ï–¢
# ------------------------
def ensure_save_exists():
    """–ï—Å–ª–∏ —Å–µ–π–≤–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞ (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π)"""
    save_path = get_save_path()
    cipher = generate_system_key()

    if not os.path.exists(save_path):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω save.json –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
            with open(resource_path("save.json"), "r", encoding="utf-8") as f:
                data = f.read()
            encrypted_data = cipher.encrypt(data.encode("utf-8"))
            with open(save_path, "wb") as f:
                f.write(encrypted_data)
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π save:", e)
    return save_path, cipher


# ------------------------
# üîπ –ó–ê–ì–†–£–ó–ö–ê SAVE
# ------------------------
def load_save():
    save_path, cipher = ensure_save_exists()
    with open(save_path, "rb") as f:
        encrypted_data = f.read()
    decrypted_data = cipher.decrypt(encrypted_data).decode("utf-8")
    return json.loads(decrypted_data)


# ------------------------
# üîπ –°–û–•–†–ê–ù–ï–ù–ò–ï SAVE
# ------------------------
def save_game(data):
    save_path, cipher = ensure_save_exists()
    json_data = json.dumps(data, indent=4)
    encrypted_data = cipher.encrypt(json_data.encode("utf-8"))
    with open(save_path, "wb") as f:
        f.write(encrypted_data)
